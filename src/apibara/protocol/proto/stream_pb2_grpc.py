# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apibara.protocol.proto.stream_pb2 as stream__pb2


class StreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamData = channel.stream_stream(
            "/apibara.node.v1alpha2.Stream/StreamData",
            request_serializer=stream__pb2.StreamDataRequest.SerializeToString,
            response_deserializer=stream__pb2.StreamDataResponse.FromString,
        )


class StreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamData(self, request_iterator, context):
        """Stream data from the node."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_StreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StreamData": grpc.stream_stream_rpc_method_handler(
            servicer.StreamData,
            request_deserializer=stream__pb2.StreamDataRequest.FromString,
            response_serializer=stream__pb2.StreamDataResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "apibara.node.v1alpha2.Stream", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Stream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamData(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/apibara.node.v1alpha2.Stream/StreamData",
            stream__pb2.StreamDataRequest.SerializeToString,
            stream__pb2.StreamDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
